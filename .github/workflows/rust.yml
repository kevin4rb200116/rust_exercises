name: Rust CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Set up Rust
        uses: actions/checkout@v2
      - name: Cache Cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Build
        run: cargo build --verbose
      - name: Test
        run: cargo test --verbose
      - name: Clippy
        run: cargo clippy --verbose -- -D warnings
      - name: Audit
        run: cargo audit
      - name: Build Release
        run: cargo build --release
      - name: Upload Release Artifact
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: target/release/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: "github.event_name == 'create' && github.event.ref_type == 'tag'"
    steps:
      - name: Download Release Artifact
        uses: actions/download-artifact@v2
        with:
          name: release
          path: ./release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
      - name: Upload Release Assets
        run: |
          for file in ./target/release/*; do
            if [ -f "$file" ]; then
              case "$(file $file)" in
                *"ELF"*"executable"*)
                  echo "Uploading $file"
                  curl \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: $(file -b --mime-type $file)" \
                    --data-binary @"$file" \
                    "${{ steps.create_release.outputs.upload_url }}/assets?name=$(basename $file)_$(uname -m).elf"
                  ;;
                *)
                  ;;
              esac
            fi
          done
